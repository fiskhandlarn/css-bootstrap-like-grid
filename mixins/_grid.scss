@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  margin-right: auto;
  margin-left: auto;

  // https://seesparkbox.com/foundry/css_grid_layout_guide_with_flexbox_fallbacks
  display: flex;
  flex-wrap: wrap;

  @supports (display: grid) {
    flex-wrap: nowrap;
    display: grid; // stylelint-disable-line declaration-block-no-duplicate-properties
    grid-template-columns: repeat($grid-columns, 1fr);
  }
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($columns: $grid-columns) {
  flex-basis: percentage($columns / $grid-columns);
  max-width: percentage($columns / $grid-columns); // https://github.com/policygenius/athenaeum/pull/328#issue-142244052

  @supports (display: grid) {
    flex-basis: auto;
    max-width: none;
    grid-column: 1 / span #{$columns};
  }
}

@mixin make-fallback-row-after($columns: $grid-columns) {
  margin-right: percentage($columns / $grid-columns);

  @supports (display: grid) {
    margin-right: 0;
  }
}

@mixin make-fallback-row-after-disable() {
  margin-right: 0;
}

@mixin make-col($size, $isParent: false, $gutter: $grid-gutter-width) {
  @include set-col-grid-column($size);

  @if $isParent {
    @include make-nest-parent($size);
  } @else {
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }
}

@mixin set-col-grid-column($size) {
  flex-basis: percentage($size / $grid-columns);
  max-width: percentage($size / $grid-columns); // https://github.com/policygenius/athenaeum/pull/328#issue-142244052

  @supports (display: grid) {
    flex-basis: auto;
    max-width: none;
    grid-column: span $size;
  }
}

@mixin make-col-start($start, $columns: $grid-columns, $isParent: false, $gutter: $grid-gutter-width) {
  flex-basis: percentage($columns / $grid-columns);
  max-width: percentage($columns / $grid-columns); // https://github.com/policygenius/athenaeum/pull/328#issue-142244052

  @if $isParent {
    @include make-nest-parent($columns);
  } @else {
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }

  @supports (display: grid) {
    flex-basis: auto;
    max-width: none;
    // https://github.com/rachelandrew/cssgrid-ama/issues/127#issuecomment-371120832
    // https://codepen.io/stavros-liaskos/pen/GGRjVZ?editors=1100
    grid-column: #{$start} / span #{$columns};
  }
}

@mixin make-fallback-col-offset($start, $columns: $grid-columns) {
  margin-left: percentage($start / $grid-columns);

  @supports (display: grid) {
    margin-left: 0;
  }
}

@mixin make-nest-parent($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  display: flex;
  flex-wrap: wrap;
  padding-right: 0;
  padding-left: 0;

  @supports (display: grid) {
    flex-wrap: nowrap;
    display: grid; // stylelint-disable-line declaration-block-no-duplicate-properties
    grid-template-columns: repeat($grid-columns, 1fr);
  }
}
